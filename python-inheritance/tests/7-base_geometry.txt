The ``7-base_geometry'' module
============================

Using ``BaseGeometry``
---------------------

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry


Test: integer_validator with valid:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

Test: value as list:
    >>> bg.integer_validator("name", [10])
    Traceback (most recent call last):
    TypeError: name must be an integer

Test: Just a single argument:
    >>> bg.integer_validator("Holberton", )
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Test: without parameter:
    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test: integer_validator with float input:
    >>> bg.integer_validator("my_int", 12.5)
    Traceback (most recent call last):
    TypeError: my_int must be an integer

Test: area function:
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Test: integer_validator with negative input:
    >>> bg.integer_validator("my_int", -12)
    Traceback (most recent call last):
    ValueError: my_int must be greater than 0

Test: integer_validator with string input:
    >>> bg.integer_validator("my_int", "Holberton")
    Traceback (most recent call last):
    TypeError: my_int must be an integer
